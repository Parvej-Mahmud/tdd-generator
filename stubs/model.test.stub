<?php

namespace {{namespace}};

use Tests\TestCase;
use App\Models\{{ModelName}};
use Illuminate\Foundation\Testing\RefreshDatabase;
use Illuminate\Foundation\Testing\WithFaker;

class {{ModelName}}Test extends TestCase
{
    use RefreshDatabase, WithFaker;

    protected ${{modelName}};

    protected function setUp(): void
    {
        parent::setUp();
        $this->{{modelName}} = {{ModelName}}::factory()->create();
    }

    /** @test */
    public function it_can_create_a_{{model_name}}()
    {
        $data = {{test_data}};

        ${{modelName}} = {{ModelName}}::create($data);

        $this->assertInstanceOf({{ModelName}}::class, ${{modelName}});
        $this->assertDatabaseHas('{{table_name}}', $data);
    }

    /** @test */
    public function it_can_update_a_{{model_name}}()
    {
        $data = {{test_data}};

        $this->{{modelName}}->update($data);

        $this->assertDatabaseHas('{{table_name}}', array_merge(
            ['id' => $this->{{modelName}}->id],
            $data
        ));
    }

    /** @test */
    public function it_can_delete_a_{{model_name}}()
    {
        ${{modelName}}Id = $this->{{modelName}}->id;

        $this->{{modelName}}->delete();

        $this->assertDatabaseMissing('{{table_name}}', ['id' => ${{modelName}}Id]);
    }

    /** @test */
    public function it_has_fillable_attributes()
    {
        $fillable = [{{fillable_fields}}];

        $this->assertEquals($fillable, (new {{ModelName}})->getFillable());
    }

    /** @test */
    public function it_has_required_attributes()
    {
        ${{modelName}} = new {{ModelName}};

        // Test required fields validation
        $this->assertFalse(${{modelName}}->save());
    }

    /** @test */
    public function it_can_be_found_by_id()
    {
        $found{{ModelName}} = {{ModelName}}::find($this->{{modelName}}->id);

        $this->assertInstanceOf({{ModelName}}::class, $found{{ModelName}});
        $this->assertEquals($this->{{modelName}}->id, $found{{ModelName}}->id);
    }

    /** @test */
    public function it_can_list_all_{{model_name}}s()
    {
        {{ModelName}}::factory()->count(3)->create();

        ${{modelName}}s = {{ModelName}}::all();

        $this->assertCount(4, ${{modelName}}s); // 3 + 1 from setUp
    }

    /** @test */
    public function it_has_timestamps()
    {
        $this->assertNotNull($this->{{modelName}}->created_at);
        $this->assertNotNull($this->{{modelName}}->updated_at);
    }
}